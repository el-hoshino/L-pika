//
//  MessagesViewController.swift
//  Transmitter
//
//  Created by 史　翔新 on 2016/11/30.
//  Copyright © 2016年 net.crazism. All rights reserved.
//

import UIKit
import Messages
import Eltaso

class MessagesViewController: MSMessagesAppViewController {
    
	@IBOutlet weak var contentsView: UIView!
	
	lazy var codeCreationViewController: CodeCreationViewController = {
		let controller = CodeCreationViewController()
		controller.delegate = self
		return controller
	}()
	
	private func _setContentsViewLayout() {
		if let contentsView = self.contentsView {
			contentsView.translatesAutoresizingMaskIntoConstraints = false
			contentsView.leadingAnchor.constraint(equalTo: self.view.leadingAnchor).isActive = true
			contentsView.trailingAnchor.constraint(equalTo: self.view.trailingAnchor).isActive = true
			contentsView.topAnchor.constraint(equalTo: self.topLayoutGuide.bottomAnchor).isActive = true
			contentsView.bottomAnchor.constraint(equalTo: self.bottomLayoutGuide.topAnchor).isActive = true
		}
	}
	
	private func _setupCodeCreationViewController() {
		let controller = self.codeCreationViewController
		self.addChildViewController(controller)
		controller.view.frame = self.contentsView.bounds
		controller.view.autoresizingMask = .flexibleSize
		self.contentsView.addSubview(controller.view)
		controller.didMove(toParentViewController: self)
	}
	
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
		
		self._setContentsViewLayout()
		self._setupCodeCreationViewController()
		
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
		self.codeCreationViewController.updateControllerStatusDependingOnTextInputMode()
    }

}

extension MessagesViewController {
	
	fileprivate func composeMessage(with text: String) {
		
		guard let conversation = self.activeConversation else {
			return
		}
		
		let queryItem = URLQueryItem(name: "code", value: text)
		let components = URLComponents(queryItems: [queryItem])
		
		let layout = MSMessageTemplateLayout()
		layout.caption = "coded"
		
		let message = MSMessage()
		message.layout = layout
		message.url = components.url
		
		conversation.insert(message) { (error) in
			if let error = error {
				Console.shared.warning(error)
			}
		}
		
		
	}
	
}

extension MessagesViewController: CodeCreationViewControllerDelegate{
	
	func codeCreationViewControllerWillBiginTextInput(_ controller: CodeCreationViewController) {
		if self.presentationStyle != .expanded {
			self.requestPresentationStyle(.expanded)
		}
	}
	
	func codeCreationViewController(_ controller: CodeCreationViewController, didFinishTextInputWithText text: String) {
		self.composeMessage(with: text)
		if self.presentationStyle != .compact {
			self.requestPresentationStyle(.compact)
		}
	}
	
}
